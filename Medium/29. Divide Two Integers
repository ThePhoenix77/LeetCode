class Solution {
public:
    int divide(int dividend, int divisor) {
        if((long long int)dividend/divisor>pow(2,31)-1){return pow(2,31)-1;}
		if((long long int)dividend/divisor<(-1)*(pow(2,31))){return -1*pow(2,31);}
		return dividend/divisor;
        
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int divide(int dividend, int divisor) {
        if (dividend == 0) return 0;
        if (dividend == INT_MIN && divisor == -1) return INT_MAX;
        else if (dividend == INT_MIN && divisor == 1) return INT_MIN;
        if(divisor==1) return dividend;
        else if(divisor==-1) return -dividend;
        long long i=0;
        long long abs_dividend = llabs(static_cast<long long>(dividend));
        long long abs_divisor = llabs(static_cast<long long>(divisor));
        while(abs_dividend>=abs_divisor){
            abs_dividend-=abs_divisor;
            i++;
        }
        if(dividend>0 && divisor<0 || dividend<0 && divisor>0) i*=-1;
        return static_cast<int> (i);
    }
};
